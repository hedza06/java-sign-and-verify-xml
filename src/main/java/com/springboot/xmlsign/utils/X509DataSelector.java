package com.springboot.xmlsign.utils;import javax.xml.crypto.AlgorithmMethod;import javax.xml.crypto.KeySelector;import javax.xml.crypto.KeySelectorException;import javax.xml.crypto.KeySelectorResult;import javax.xml.crypto.XMLCryptoContext;import javax.xml.crypto.XMLStructure;import javax.xml.crypto.dsig.SignatureMethod;import javax.xml.crypto.dsig.keyinfo.KeyInfo;import javax.xml.crypto.dsig.keyinfo.X509Data;import java.security.PublicKey;import java.security.cert.X509Certificate;import java.util.List;public class X509DataSelector extends KeySelector {    public KeySelectorResult select(KeyInfo keyInfo, KeySelector.Purpose purpose,                                    AlgorithmMethod method, XMLCryptoContext context) throws KeySelectorException    {        if (keyInfo == null) {            throw new KeySelectorException("Null KeyInfo object!");        }        SignatureMethod sm = (SignatureMethod) method;        List list = keyInfo.getContent();        for (int i = 0; i < list.size(); i++)        {            XMLStructure xmlStructure = (XMLStructure) list.get(i);            if (xmlStructure instanceof X509Data)            {                PublicKey publicKey = null;                for (Object item : ((X509Data) xmlStructure).getContent())                {                    if (item instanceof X509Certificate)                    {                        try                        {                            publicKey = ((X509Certificate) item).getPublicKey();                            break;                        }                        catch (Exception e) {                            throw new KeySelectorException(e);                        }                    }                }                // make sure algorithm is compatible with method                if (algEquals(sm.getAlgorithm(), publicKey.getAlgorithm())) {                    return new SimpleKeySelectorResult(publicKey);                }            }        }        throw new KeySelectorException("No KeyValue element found!");    }    static boolean algEquals(String algURI, String algName)    {        if (algName.equalsIgnoreCase("DSA") && algURI.equalsIgnoreCase(SignatureMethod.DSA_SHA1)) {            return true;        }        else {            return algName.equalsIgnoreCase("RSA") && algURI.equalsIgnoreCase(SignatureMethod.RSA_SHA1);        }    }}